#!/usr/bin/env python
# -*- coding: utf-8 -*-
r"""Script for generating an IntEnum of DICOM tags from pydicom's dictionary"""
from argparse import ArgumentParser, Namespace
from pathlib import Path
from typing import Final

from pydicom.datadict import DicomDictionary


HEADER: Final = r"""#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Generated by tag_enum.py
#
from enum import IntEnum
from pydicom.tag import BaseTag as PydicomTag


class Tag(IntEnum):
"""

METHODS: Final = r"""
    @property
    def group(self) -> int:
        return self >> 16

    @property
    def element(self) -> int:
        return self & 0xffff

    def __str__(self) -> str:
        tag_repr = "<{0:04x},{1:04x}>".format(self.group, self.element)
        return f"{tag_repr} {self.name}"

    def __repr__(self) -> str:
        return str(self)
"""


def write(path: Path) -> None:
    with open(path, "w") as f:
        f.write(HEADER)
        f.write(METHODS)
        for tag, v in DicomDictionary.items():
            keyword = v[-1]
            if keyword:
                f.write(f"    {keyword} = {tag}\n")


def parse_args() -> Namespace:
    parser = ArgumentParser(description="Generate IntEnum of DICOM tags")
    parser.add_argument("dest", help="Output filepath")
    return parser.parse_args()


def main(args: Namespace):
    dest = Path(args.dest)
    if not dest.parent.is_dir():
        raise NotADirectoryError(dest.parent)
    write(dest)


if __name__ == "__main__":
    main(parse_args())
